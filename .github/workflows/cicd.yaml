name: Terraform GKE Cluster Setup and Deploy

on:
  push:
    branches:
      - k8sdeploy
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          create_credentials_file: true
          export_environment_variables: true
          universe: googleapis.com
          cleanup_credentials: true

      - name: Write GCP Credentials to File
        run: echo '${{ secrets.GCP_CREDENTIALS }}' > /tmp/gcp_credentials.json

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_credentials_path: "/tmp/gcp_credentials.json"

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_credentials_path: "/tmp/gcp_credentials.json"

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          create_credentials_file: true
          export_environment_variables: true
          universe: googleapis.com
          cleanup_credentials: true

      - name: Install Google Cloud SDK
        run: |
          echo "Installing Google Cloud SDK"
          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/google.asc
          echo "deb [signed-by=/etc/apt/trusted.gpg.d/google.asc] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update
          sudo apt-get install google-cloud-sdk

      - name: Install gke-gcloud-auth-plugin
        run: |
          echo "Installing gke-gcloud-auth-plugin"
          sudo apt-get install google-cloud-cli-gke-gcloud-auth-plugin

      - name: Configure kubectl
        run: |
          PROJECT_ID=$(echo '${{ secrets.GCP_CREDENTIALS }}' | jq -r .project_id)
          GCP_ZONE="us-east1-b"
          GCP_CLUSTER_NAME="flasksql-cluster"
          echo "Using GCP Zone: ${GCP_ZONE}"
          echo "Extracted Project ID: ${PROJECT_ID}"
          gcloud container clusters get-credentials ${GCP_CLUSTER_NAME} --zone ${GCP_ZONE} --project ${PROJECT_ID}

      - name: Create k8secret.yaml from GitHub Secrets
        run: |
          cat <<EOF > k8secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: mysql-secrets
          type: Opaque
          data:
            root_password: $(echo -n '${{ secrets.MYSQL_ROOT_PASSWORD }}' | base64)
            database_name: $(echo -n '${{ secrets.DATABASE_NAME }}' | base64)
            user: $(echo -n '${{ secrets.MYSQL_USER }}' | base64)
            password: $(echo -n '${{ secrets.MYSQL_PASSWORD }}' | base64)
          EOF

      - name: Wait for Helm Chart Update
        run: |
          # Use the same version scheme as in the helm-chart-ci workflow
          VERSION="0.0.${{ github.run_number }}"
          echo "‚è≥ Waiting for updated Helm chart for version $VERSION..."
          for i in {1..10}; do
            echo "üîç Checking for version: $VERSION"
            curl -s https://yuvalbenar.github.io/helm-charts/index.yaml | tee helm-index.yaml
            if grep "$VERSION" helm-index.yaml; then
              echo "‚úÖ Helm chart version $VERSION found. Proceeding with deployment."
              exit 0
            fi
            echo "‚è≥ Helm chart update not found, retrying in 30 seconds..."
            sleep 30
          done
          echo "‚ùå Error: Helm chart update not found after multiple retries. Exiting."
          exit 1

      - name: Deploy Updated Helm Chart to GKE
        run: |
          echo "üöÄ Deploying Helm Chart to GKE"
          helm repo update
          helm upgrade --install flasksql-chart yuvalbenar/helm-charts \
            --namespace default \
            --set image.tag=$VERSION

      - name: Verify Kubernetes Services
        run: |
          kubectl get services

      - name: Check Flask App Pods
        run: |
          echo "üîç Checking if Flask app pods are running..."
          kubectl get pods
