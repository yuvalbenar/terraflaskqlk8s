name: Terraform GKE Cluster Setup and Deploy via Helm

on:
  push:
    branches:
      - k8sdeploy
    paths-ignore:
      - 'charts/**'
  pull_request:
    branches:
      - k8sdeploy
    paths-ignore:
      - 'charts/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Environment Variables
        run: |
          echo "IMAGE_NAME=yuvalbenar/terraflaskqlk8s" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.run_number }}" >> $GITHUB_ENV
          echo "VERSION=0.0.${{ github.run_number }}" >> $GITHUB_ENV  # Ensure correct versioning

      - name: Build and Push Docker Image
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest

  terraform:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          create_credentials_file: true
          export_environment_variables: true
          universe: googleapis.com
          cleanup_credentials: true

      - name: Write GCP Credentials to File
        run: echo '${{ secrets.GCP_CREDENTIALS }}' > /tmp/gcp_credentials.json

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_credentials_path: "/tmp/gcp_credentials.json"

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_credentials_path: "/tmp/gcp_credentials.json"

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          create_credentials_file: true
          export_environment_variables: true
          universe: googleapis.com
          cleanup_credentials: true

      - name: Install Google Cloud SDK and Helm
        run: |
          echo "Installing Google Cloud SDK"
          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/google.asc
          echo "deb [signed-by=/etc/apt/trusted.gpg.d/google.asc] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update
          sudo apt-get install google-cloud-sdk
          echo "Installing Helm"
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      - name: Read Version from Remote version.txt
        id: get_version
        run: |
          echo "Reading version from remote version.txt"
          VERSION=$(curl -s https://raw.githubusercontent.com/yuvalbenar/terraflaskqlk8s/k8sdeploy/version.txt)
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          if [ -z "$VERSION" ]; then
            echo "‚ùå ERROR: VERSION is empty!"
            exit 1
          fi

      - name: Deploy Flask App Using Helm
        run: |
          echo "üöÄ Deploying Helm Chart to GKE"
          helm upgrade --install flasksql-chart helmcharts/flasksql-chart \
            --namespace default \
            -f charts/terraflaskqlk8s-chart/values.yaml \
            --set image.tag=$VERSION --version $VERSION

      - name: Verify Kubernetes Services
        run: |
          echo "Verifying Kubernetes Services"
          kubectl get services

      - name: Check Flask App Pods
        run: |
          echo "üîç Checking if Flask app pods are running..."
          kubectl get pods

  verify-monitoring:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          create_credentials_file: true
          export_environment_variables: true
          universe: googleapis.com
          cleanup_credentials: true

      - name: Install Google Cloud SDK
        run: |
          echo "Installing Google Cloud SDK"
          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/google.asc
          echo "deb [signed-by=/etc/apt/trusted.gpg.d/google.asc] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update
          sudo apt-get install google-cloud-sdk

      - name: Install Helm
        run: |
          echo "Installing Helm"
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      - name: Add and Update Helm Repository
        run: |
          echo "Adding Helm repository"
          helm repo add helmcharts https://yuvalbenar.github.io/helm-charts/
          helm repo update
          helm search repo helmcharts --versions

      - name: Install GKE Auth Plugin
        run: |
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

      - name: Set GKE Context to Connect to Cluster
        run: |
          gcloud container clusters get-credentials flasksql-cluster --project terraflaskqlk8s --zone us-east1-b

      - name: Install Helm and Add Prometheus Repo
        run: |
          echo "Installing Helm (for monitoring) and adding Prometheus repo"
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts/
          helm repo update

      - name: Install Prometheus CRDs
        run: |
          echo "Installing Prometheus CRDs for ServiceMonitor"
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/example/prometheus-operator-crd/servicemonitor.crd.yaml || echo "CRD already exists"

      - name: Verify Monitoring Stack
        run: |
          echo "Checking if Prometheus and Grafana are running..."
          kubectl get pods -n monitoring
          if kubectl get pods -n monitoring | grep -qi grafana; then
            echo "‚úÖ Monitoring stack is up and running."
          else
            echo "‚ö†Ô∏è Monitoring stack not found, deploying it now."
            helm upgrade --install my-monitoring prometheus-community/kube-prometheus-stack -n monitoring -f prometheus_values.yaml
          fi
