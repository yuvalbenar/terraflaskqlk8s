name: Terraform GKE Cluster Setup and Deploy

on:
  push:
    branches:
      - k8sdeploy
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      # ... Terraform steps remain unchanged ...

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          create_credentials_file: true
          export_environment_variables: true
          universe: googleapis.com
          cleanup_credentials: true

      # ... Other steps remain unchanged ...

      - name: Read Version from version.txt
        id: get_version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"
      
      - name: Wait for Helm Chart Update
        run: |
          echo "‚è≥ Waiting for updated Helm chart for version $VERSION..."
          for i in {1..10}; do
            echo "üîç Checking for version: $VERSION"
            curl -s https://yuvalbenar.github.io/helm-charts/index.yaml | tee helm-index.yaml
            if grep "$VERSION" helm-index.yaml; then
              echo "‚úÖ Helm chart version $VERSION found. Proceeding with deployment."
              exit 0
            fi
            echo "‚è≥ Helm chart update not found, retrying in 30 seconds..."
            sleep 30
          done
          echo "‚ùå Error: Helm chart update not found after multiple retries. Exiting."
          exit 1

      - name: Deploy Updated Helm Chart to GKE
        run: |
          echo "üöÄ Deploying Helm Chart to GKE"
          helm repo update
          helm upgrade --install flasksql-chart yuvalbenar/helm-charts \
            --namespace default \
            --set image.tag=$VERSION

      - name: Verify Kubernetes Services
        run: |
          kubectl get services

      - name: Check Flask App Pods
        run: |
          echo "üîç Checking if Flask app pods are running..."
          kubectl get pods
