name: Terraform GKE Cluster Setup and Deploy via helm

on:
  push:
    branches:
      - k8sdeploy
  workflow_dispatch:

env:
  IMAGE_NAME: yuvalbenar/terraflaskqlk8s
  IMAGE_TAG: latest

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Build Environment Variables
        run: |
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          echo "Built IMAGE_TAG=latest"

      - name: Build Docker Image
        run: |
          docker build --no-cache --pull -t $IMAGE_NAME:latest .
          docker tag $IMAGE_NAME:latest $IMAGE_NAME:latest

      - name: Push Docker Image
        run: |
          docker push $IMAGE_NAME:latest

  build-Test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Test Environment Variables
        run: |
          echo "IMAGE_TAG=latest" >> $GITHUB_ENV
          echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> $GITHUB_ENV
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> $GITHUB_ENV
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> $GITHUB_ENV
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> $GITHUB_ENV
          echo "PORT=${{ secrets.PORT }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "Retaining IMAGE_TAG=latest"

      - name: Debug Environment Variables
        run: |
          echo "IMAGE_NAME=${IMAGE_NAME}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
          echo "PORT=${PORT}"

      - name: Build Docker Compose Image
        run: |
          docker compose build --no-cache
          docker tag ${IMAGE_NAME}:latest ${IMAGE_NAME}:latest

      - name: Push Docker Image (Test Stage)
        run: |
          docker push ${IMAGE_NAME}:latest

      - name: Test - Running Project
        run: |
          docker compose up -d
          sleep 5
          docker compose ps

      - name: Run Tests
        run: |
          sleep 3
          docker compose logs
          echo "Testing on port: ${PORT}"
          curl -f http://localhost:${PORT}
          echo "Tests passed..."

  helm:
    runs-on: ubuntu-latest
    needs: build-Test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Prometheus Operator CRDs
        run: |
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/master/bundle.yaml

      - name: Set New Version and Update version.txt
        run: |
          NEW_VERSION="0.0.${{ github.run_number }}"
          echo "Setting new version to: $NEW_VERSION"
          echo "$NEW_VERSION" > version.txt
          git config --global user.name "github-actions-bot"
          git config --global user.email "github-actions@github.com"
          git add version.txt
          git commit -m "Update version.txt to $NEW_VERSION" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/yuvalbenar/terraflaskqlk8s.git k8sdeploy

      - name: Update Helm Chart Version with New Version
        run: |
          VERSION=$(cat version.txt)
          echo "🔹 Setting Helm chart version to: $VERSION"
          cd charts/terraflaskqlk8s-chart
          sed -i "s/^version:.*/version: $VERSION/g" Chart.yaml
          echo "# Auto-updated by CI workflow" >> Chart.yaml
          echo "✅ Updated Chart.yaml:"
          cat Chart.yaml
          cd ../..

      - name: Package Helm Chart
        run: |
          cd charts
          helm package terraflaskqlk8s-chart --destination ..
          cd ..
          ls -lrta

      - name: Update Helm Repo Index
        run: |
          helm repo index --url https://yuvalbenar.github.io/helm-charts/ --merge index.yaml .
          cat index.yaml

      - name: Push Helm Chart to Repository
        env:
          HELM_REPO_PAT: ${{ secrets.HELM_REPO_PAT }}
        run: |
          echo "📥 Cloning helm-charts repository..."
          git clone https://${HELM_REPO_PAT}@github.com/yuvalbenar/helm-charts.git helmrepo
          cd helmrepo
          git config --global user.name "github-actions-bot"
          git config --global user.email "github-actions@github.com"
          echo "🗑 Removing old Helm packages and index..."
          rm -f *.tgz && rm -f index.yaml
          echo "📂 Copying new Helm chart and index.yaml..."
          cp ../*.tgz .
          cp ../index.yaml .
          echo "📝 Committing updated Helm chart..."
          git add .
          git commit -m "Updated Helm chart to version $(cat ../version.txt)" || echo "No changes to commit"
          echo "🚀 Pushing to main branch..."
          git push origin main
          cd ..
          echo "✅ Helm chart successfully updated!"

  terraform:
    runs-on: ubuntu-latest
    needs: helm
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          create_credentials_file: true
          export_environment_variables: true
          universe: googleapis.com
          cleanup_credentials: true

      - name: Write GCP Credentials to File
        run: echo '${{ secrets.GCP_CREDENTIALS }}' > /tmp/gcp_credentials.json

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_credentials_path: "/tmp/gcp_credentials.json"

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_credentials_path: "/tmp/gcp_credentials.json"

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          create_credentials_file: true
          export_environment_variables: true
          universe: googleapis.com
          cleanup_credentials: true

      - name: Install Google Cloud SDK
        run: |
          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/google.asc
          echo "deb [signed-by=/etc/apt/trusted.gpg.d/google.asc] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update
          sudo apt-get install google-cloud-sdk

      - name: Install Helm
        run: |
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      - name: Add and Update Helm Repository
        run: |
          helm repo add helmcharts https://yuvalbenar.github.io/helm-charts/
          helm repo update
          helm search repo helmcharts --versions

      - name: Install GKE Auth Plugin
        run: |
          sudo apt-get update && sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin

      - name: List GKE Clusters
        run: |
          gcloud container clusters list --project terraflaskqlk8s

      - name: Set GKE Context to Connect to Cluster
        run: |
          gcloud container clusters get-credentials flasksql-cluster --project terraflaskqlk8s --zone us-east1-b

      - name: Create k8secret.yaml from GitHub Secrets
        run: |
          echo "Creating k8secret.yaml"
          cat <<EOF > k8secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: mysql-secrets
          type: Opaque
          data:
            root_password: $(echo -n '${{ secrets.MYSQL_ROOT_PASSWORD }}' | base64)
            database_name: $(echo -n '${{ secrets.DATABASE_NAME }}' | base64)
            user: $(echo -n '${{ secrets.MYSQL_USER }}' | base64)
            password: $(echo -n '${{ secrets.MYSQL_PASSWORD }}' | base64)
          EOF
          echo "Applying k8secret.yaml to the cluster"
          kubectl apply -f k8secret.yaml -n default

      - name: Read Version from Remote version.txt
        id: get_version
        run: |
          VERSION=$(curl -s https://raw.githubusercontent.com/yuvalbenar/terraflaskqlk8s/k8sdeploy/version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      - name: Wait for Helm Chart Update
        run: |
          for i in {1..10}; do
            curl -s https://yuvalbenar.github.io/helm-charts/index.yaml | tee helm-index.yaml
            if grep "$VERSION" helm-index.yaml; then
              exit 0
            fi
            sleep 30
          done
          exit 1

      - name: Patch Existing ConfigMaps for Helm Adoption
        run: |
          kubectl patch configmap flask-config -n default --type merge -p '{
            "metadata": {
              "labels": {"app.kubernetes.io/managed-by": "Helm"},
              "annotations": {"meta.helm.sh/release-name": "flasksql-chart", "meta.helm.sh/release-namespace": "default"}
            }
          }' || echo "ConfigMap 'flask-config' not found, skipping patch."
          kubectl patch configmap mysql-config -n default --type merge -p '{
            "metadata": {
              "labels": {"app.kubernetes.io/managed-by": "Helm"},
              "annotations": {"meta.helm.sh/release-name": "flasksql-chart", "meta.helm.sh/release-namespace": "default"}
            }
          }' || echo "ConfigMap 'mysql-config' not found, skipping patch."

      - name: Patch Existing Service 'gif-db' for Helm Adoption
        run: |
          kubectl patch service gif-db -n default --type merge -p '{
            "metadata": {
              "labels": {"app.kubernetes.io/managed-by": "Helm"},
              "annotations": {"meta.helm.sh/release-name": "flasksql-chart", "meta.helm.sh/release-namespace": "default"}
            }
          }' || echo "Service 'gif-db' not found, skipping patch."

      - name: Deploy Flask App Using Helm, Updating Release
        run: |
          echo "🚀 Deploying Helm Chart to GKE"
          helm upgrade --install flasksql-chart helmcharts/flasksql-chart \
            --namespace default \
            --set image.tag=$VERSION --version $VERSION

      - name: Verify Kubernetes Services
        run: |
          kubectl get services

      - name: Check Flask App Pods
        run: |
          kubectl get pods

  verify-monitoring:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          create_credentials_file: true
          export_environment_variables: true
          universe: googleapis.com
          cleanup_credentials: true

      - name: Install Google Cloud SDK
        run: |
          curl -sSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /etc/apt/trusted.gpg.d/google.asc
          echo "deb [signed-by=/etc/apt/trusted.gpg.d/google.asc] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update
          sudo apt-get install google-cloud-sdk

      - name: Install Helm
        run: |
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      - name: Add and Update Helm Repository
        run: |
          helm repo add helmcharts https://yuvalbenar.github.io/helm-charts/
          helm repo update
          helm search repo helmcharts --versions

      - name: Install GKE Auth Plugin
        run: |
          sudo apt-get update && sudo apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin

      - name: Set GKE Context to Connect to Cluster
        run: |
          gcloud container clusters get-credentials flasksql-cluster --project terraflaskqlk8s --zone us-east1-b

      - name: Install Helm and Add Prometheus Repo
        run: |
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts/
          helm repo update

      - name: Verify Monitoring Is Up & Running
        run: |
          helm upgrade --install my-monitoring prometheus-community/kube-prometheus-stack \
            --namespace monitoring --create-namespace -f prometheus_values.yaml

  cleanup-docker-tags:
    runs-on: ubuntu-latest
    needs: verify-monitoring  # This makes it the final job in the workflow.
    env:
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Run Docker Hub Cleanup
        run: |
          chmod +x ./docker-clean.sh
          ./docker-clean.sh
